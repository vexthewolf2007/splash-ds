{"version":3,"sources":["SplashImage.tsx","assets/splash-ds-logo.png","assets/new-3ds.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SplashImage","props","image","keepRatio","showTransformer","imgRef","useRef","trRef","React","useEffect","current","nodes","getLayer","batchDraw","anchors","ref","draggable","enabledAnchors","window","Konva","pixelRatio","screenConfig","top","x","y","width","height","bottom","loadImage","file","Promise","resolve","reject","img","Image","onload","src","App","useState","undefined","splashImage","setSplashImage","splashDataTop","setSplashDataTop","splashDataBottom","setSplashDataBottom","dsImage","setDsImage","previewImage","setPreviewImage","dsOpacity","setDsOpacity","setKeepRatio","backgroundColor","setBackgroundColor","downloadRequested","setDownloadRequested","handleCancel","e","stopPropagation","preventDefault","cropScreen","screen","callBack","srcCanvas","document","getElementsByClassName","querySelector","config","imgData","getContext","getImageData","Object","values","tempCanvas","createElement","tempContext","putImageData","imgDataUrl","toDataURL","finalImage","previewConfig","previewCanvas","getElementById","drawImage","data","canvas","canvasData","fileData","i","length","String","fromCharCode","convertImageToBin","rotationCanvas","rotationContext","save","translate","rotate","Math","PI","restore","rotateImage","new3DsImage","then","previewDataUrl","zip","JSZip","binary","createFolders","slice","base64","generateAsync","type","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","url","name","link","href","download","body","appendChild","click","removeChild","downloadFile","downloadZip","className","id","alt","logoImage","onDragOver","onDrop","dataTransfer","files","event","dataUrl","target","min","max","step","onChange","value","htmlFor","checked","fill","text","fontSize","fontStyle","stroke","strokeWidth","listening","opacity","onClick","disabled","innerHTML","style","display","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a2756f06.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Image, Transformer } from \"react-konva\";\n\ntype Props = {\n  image: any\n  keepRatio: boolean\n  showTransformer: boolean\n}\n\nconst SplashImage = (props: Props) => {\n\n  const { image, keepRatio, showTransformer } = props\n\n  const imgRef = useRef<any>()\n  const trRef = useRef<any>()\n\n  React.useEffect(() => {\n      trRef?.current?.nodes([imgRef.current]);\n      trRef?.current?.getLayer().batchDraw();\n  });\n\n  const anchors = keepRatio ? [\n    'top-left',\n    'top-right',\n    'bottom-left',\n    'bottom-right',\n  ] : [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right'\n  ]\n\n  return (<>\n    <Image image={image} ref={imgRef} draggable />\n    {showTransformer &&\n      <Transformer\n        enabledAnchors={anchors}\n        keepRatio={keepRatio}\n        ref={trRef}\n      />\n    }\n  </>)\n}\n\nexport { SplashImage }\n","export default __webpack_public_path__ + \"static/media/splash-ds-logo.3acf7fdb.png\";","export default __webpack_public_path__ + \"static/media/new-3ds.c72562d7.png\";","import JSZip from 'jszip';\nimport React, { DragEvent, useEffect, useState } from \"react\";\nimport { Image, Layer, Rect, Stage, Text } from \"react-konva\";\n\nimport { SplashImage } from './SplashImage'\n\n// import original3DsImage from \"./assets/original-3ds.png\";\nimport logoImage from \"./assets/splash-ds-logo.png\";\nimport new3DsImage from \"./assets/new-3ds.png\";\n\nimport './App.css';\n\n// @ts-expect-error\nwindow.Konva.pixelRatio = 1;\n\ninterface IIndexable {\n  [key: string]: any;\n}\n\n// console.log(window.Konva.pixelRatio, window.devicePixelRatio);\n\nconst screenConfig: IIndexable = {\n  top: {\n    x: (680 - 400)/2,\n    y: 96,\n    width: 400,\n    height: 240,\n  },\n  bottom: {\n    x: (680 - 320)/2,\n    y: 415,\n    width: 320,\n    height: 240,\n  }\n}\n\n// const iconConfig = {\n//     x: (680 - 48)/2,\n//     y: 126,\n//     width: 48,\n//     height: 48,\n// }\n\nconst loadImage = (file: any) => {\n  return new Promise((resolve, reject) => {\n    const img = new window.Image();\n    img.onload = function () {\n      resolve(img);\n    };\n    img.src = file;\n  });\n};\n\n// const scaleImage = (image: CanvasImageSource) => {\n//   const scaledCanvas = document.createElement('canvas');\n//   scaledCanvas.width = image.width as number * 0.5;\n//   scaledCanvas.height = image.height as number * 0.5;\n\n//   scaledCanvas\n//     ?.getContext('2d')\n//     ?.drawImage(image, 0, 0, scaledCanvas.width, scaledCanvas.height);\n\n//   return scaledCanvas;\n// }\n\nconst rotateImage = (image: CanvasImageSource) => {\n  const rotationCanvas = document.createElement('canvas');\n  rotationCanvas.width = image.height as number;\n  rotationCanvas.height = image.width as number;\n\n  const rotationContext = rotationCanvas.getContext(\"2d\");\n\n  if(rotationContext) {\n    rotationContext.save();\n    rotationContext.translate(rotationCanvas.width/2, rotationCanvas.height/2);\n    rotationContext.rotate(90 * Math.PI/180);\n    rotationContext.drawImage(image, -image.width/2, -image.height/2);\n    rotationContext.restore();\n  }\n\n  return rotationCanvas;\n}\n\n// const previewImage = (canvas: HTMLCanvasElement) => {\n//   const imageUrl = canvas.toDataURL(\"image/png\");\n//   const image = document.createElement('img');\n//   image.width = canvas.width;\n//   image.src = imageUrl;\n\n//   document.getElementById('preview')?.appendChild(image);\n// }\n\nconst convertImageToBin = (canvas: HTMLCanvasElement) => {\n  if(canvas) {\n    const canvasData = canvas?.getContext('2d')?.getImageData(0, 0, canvas.width, canvas.height).data;\n    let fileData = '';\n\n    if(canvasData) {\n      for(var i = 0; i < canvasData.length; i += 4) {\n        fileData += String.fromCharCode(canvasData[i+2], canvasData[i+1], canvasData[i]);\n      }\n    }\n\n    return fileData;\n  }\n}\n\nconst downloadFile = (url: string, name: string) => {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = name;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nconst App = () => {\n  const [splashImage, setSplashImage] = useState(undefined);\n  const [splashDataTop, setSplashDataTop] = useState('');\n  const [splashDataBottom, setSplashDataBottom] = useState('');\n  const [dsImage, setDsImage] = useState(undefined);\n  const [previewImage, setPreviewImage] = useState('');\n  // const [iconImage, setIconImage] = useState('');\n\n  const [dsOpacity, setDsOpacity] = useState(0)\n  const [keepRatio, setKeepRatio] = useState(true)\n  const [backgroundColor, setBackgroundColor] = useState('#228ae2');\n\n  const [downloadRequested, setDownloadRequested] = useState(false);\n\n  const reset = () => {\n    setSplashImage(undefined);\n    setSplashDataTop('');\n    setSplashDataBottom('');\n    const preview = document.getElementById('preview') as HTMLElement;\n    preview.innerHTML = '';\n    setPreviewImage('');\n    // setIconImage('');\n    setDownloadRequested(false);\n  }\n\n  const handleCancel = (e: DragEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: DragEvent) => {\n    handleCancel(e);\n\n    if (e.dataTransfer.files.length >= 1) {\n      const file = e.dataTransfer.files[0];\n      const allowed = {\n        \"image/jpeg\": true,\n        \"image/gif\": true,\n        \"image/png\": true,\n      };\n\n      if (file.type in allowed) {\n        const reader = new window.FileReader();\n        reader.onload = (() => {\n          return function (event: any) {\n            const dataUrl = event.target.result;\n            loadImage(dataUrl).then((img: any) => {\n              setSplashImage(img);\n            });\n          };\n        })();\n\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  // const generateIcon = () => {\n  //   console.log('generateIcon');\n\n  //   const srcCanvas = document.getElementsByClassName('konvajs-content')[0].querySelector('canvas');\n\n  //   const config = { ...iconConfig };\n  //   config.x *= 2\n  //   config.y *= 2\n  //   config.width *= 2\n  //   config.height *= 2\n\n  //   const imgData = srcCanvas?.getContext('2d')?.getImageData(...Object.values(config) as [number, number, number, number])\n\n  //   const tempCanvas = document.createElement(\"canvas\");\n  //   const tempContext = tempCanvas.getContext(\"2d\");\n\n  //   tempCanvas.width = config.width;\n  //   tempCanvas.height = config.height;\n\n  //   if(imgData) {\n  //     tempContext?.putImageData(imgData, 0, 0);\n  //   }\n\n  //   // previewImage(tempCanvas);\n\n  //   const imgDataUrl = tempCanvas.toDataURL(\"image/png\");\n  //   const iconImage = document.createElement('img');\n\n  //   iconImage.onload = () => {\n  //     const scaledIcon = scaleImage(iconImage);\n  //     document.getElementById('icon')?.appendChild(scaledIcon);\n  //     setIconImage(scaledIcon.toDataURL(\"image/png\"));\n  //   }\n\n  //   iconImage.src = imgDataUrl;\n  // }\n\n  const cropScreen = (screen: string, callBack: Function) => {\n    const srcCanvas = document.getElementsByClassName('konvajs-content')[0].querySelector('canvas');\n\n    const config = {...screenConfig[screen]};\n    // config.x *= window.Konva.pixelRatio\n    // config.y *= window.Konva.pixelRatio\n    // config.width *= window.Konva.pixelRatio\n    // config.height *= window.Konva.pixelRatio\n\n    const imgData = srcCanvas?.getContext('2d')?.getImageData(...Object.values(config) as [number, number, number, number])\n\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempContext = tempCanvas.getContext(\"2d\");\n\n    tempCanvas.width = config.width;\n    tempCanvas.height = config.height;\n\n    if(imgData) {\n      tempContext?.putImageData(imgData, 0, 0);\n    }\n\n    // previewImage(tempCanvas);\n\n    const imgDataUrl = tempCanvas.toDataURL(\"image/png\");\n\n    const finalImage = document.createElement('img');\n\n    const previewConfig = screen === 'top' ? {x: 0, y: 0} : {x: 40, y: 240};\n\n    finalImage.onload = () => {\n      // const scaledImage = scaleImage(finalImage);\n      const previewCanvas = document.getElementById('preview-canvas') as HTMLCanvasElement;\n      previewCanvas?.getContext('2d')?.drawImage(finalImage, previewConfig.x, previewConfig.y);\n      const rotatedImage = rotateImage(finalImage);\n      const data = convertImageToBin(rotatedImage);\n      if(data) {\n        callBack(data);\n      }\n    }\n\n    finalImage.src = imgDataUrl;\n  }\n\n  const splishSplash = () => {\n    setDownloadRequested(true);\n  }\n\n  // console.log({ screenConfig, splashDataTop, splashDataBottom });\n  // console.log({ top: screenConfig.top, bottom: screenConfig.bottom });\n  // console.log({ splashDataTop, splashDataBottom, previewImage, iconImage });\n\n  useEffect(() => {\n    loadImage(new3DsImage).then((img: any) => {\n      setDsImage(img);\n    });\n  }, []);\n\n  useEffect(() => {\n    if(downloadRequested) {\n      cropScreen('top', setSplashDataTop);\n      cropScreen('bottom', setSplashDataBottom);\n\n      // generateIcon();\n    }\n  }, [downloadRequested]);\n\n  useEffect(() => {\n    if(splashDataTop && splashDataBottom) {\n      const previewImage = document.createElement('img');\n\n      // previewImage.onload = () => {\n      //   console.log('preview image loaded!');\n      //   document.getElementById('preview')?.appendChild(previewImage);\n      // }\n\n      const previewCanvas = document?.getElementById('preview-canvas') as HTMLCanvasElement;\n      const previewDataUrl = previewCanvas?.toDataURL(\"image/png\");\n\n      // console.log({ previewCanvas, previewDataUrl });\n\n      setPreviewImage(previewDataUrl);\n      previewImage.src = previewDataUrl;\n    }\n  }, [splashDataTop, splashDataBottom]);\n\n  useEffect(() => {\n    const downloadZip = () => {\n      const zip = new JSZip();\n      zip.file('splash.bin', splashDataTop, { binary: true, createFolders: false });\n      zip.file('splashbottom.bin', splashDataBottom, { binary: true, createFolders: false });\n      zip.file('preview.png', previewImage.slice(22), { base64: true, createFolders: false });\n      // zip.file('icon.png', iconImage.slice(22), { base64: true, createFolders: false});\n\n      zip.generateAsync({ type: \"blob\" }).then((blob) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = function() {\n          const base64data = reader.result;\n          if(base64data) {\n            downloadFile(base64data as string, 'splash.zip');\n          }\n        }\n      });\n    }\n\n    if(previewImage) {\n      downloadZip();\n      setDownloadRequested(false);\n\n      setSplashDataTop('');\n      setSplashDataBottom('');\n      setPreviewImage('');\n      // setIconImage('');\n\n      // downloadFile(\"data:application/octet-stream;base64,\" + splashDataTop, 'splash.bin');\n      // downloadFile(\"data:application/octet-stream;base64,\" + splashDataBottom, 'splashbottom.bin');\n    }\n  }, [/* iconImage, */ previewImage, splashDataBottom, splashDataTop]);\n\n  return (\n    <div className=\"App\">\n      <img id=\"logo\" alt=\"logo\" src={logoImage} />\n      <h3>Splash screen creator for Nintendo 3DS systems</h3>\n      <div onDragOver={handleCancel} onDrop={handleDrop}>\n        <div id=\"options\">\n          <div className=\"option\">\n            <span className=\"input-spacer\">\n              <input id=\"dsTransparency\" type=\"range\" min={0} max={1} step={0.1} onChange={(e) => setDsOpacity(+e.target.value)} value={dsOpacity} />\n            </span>\n            <label htmlFor=\"dsTransparency\">3DS transparency (helps when resizing and rotating)</label>\n          </div>\n          <div className=\"option\">\n            <span className=\"input-spacer\">\n              <input type=\"checkbox\" id=\"keepRatio\" checked={keepRatio} onChange={(e) => setKeepRatio(e.target.checked)} />\n            </span>\n            <label htmlFor=\"keepRatio\">Keep splash image ratio when resizing</label>\n          </div>\n          <div className=\"option\">\n            <span className=\"input-spacer\">\n              <input type=\"color\" id=\"bgColor\" onChange={(e) => setBackgroundColor(e.target.value)} value={backgroundColor} />\n            </span>\n            <label htmlFor=\"keepRatio\">Screen background color</label>\n          </div>\n        </div>\n        {/* <Stage width={window.innerWidth} height={window.innerHeight}> */}\n        <Stage width={680} height={743}>\n          <Layer>\n            <Rect {...screenConfig.top} fill={backgroundColor} />\n            <Rect {...screenConfig.bottom} fill={backgroundColor} />\n            {/* <Rect {...iconConfig} fill={'tomato'} /> */}\n            {splashImage\n              ? <SplashImage image={splashImage} keepRatio={keepRatio} showTransformer={!downloadRequested} />\n              : <Text text=\"Drop an image here\" fontSize={32} fontStyle=\"bold\" x={190} y={196} fill=\"#005aa8\" stroke=\"white\" strokeWidth={1} />\n            }\n            {dsImage && <Image image={dsImage} listening={false} opacity={1 - dsOpacity} />}\n          </Layer>\n        </Stage>\n        {/* <div id=\"icon\">\n        </div> */}\n        <button onClick={splishSplash} disabled={!splashImage}>download splash screen</button>\n        <button onClick={reset}>reset</button>\n      </div>\n      <div id=\"preview\">\n        <canvas\n          id=\"preview-canvas\"\n          width={screenConfig.top.width}\n          height={screenConfig.top.height + screenConfig.bottom.height}\n          style={{ display: 'none' }}\n        ></canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}